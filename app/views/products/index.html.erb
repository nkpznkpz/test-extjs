<style type="text/css">
  .desCombo{
    color:#888888;
  }
</style>
<script type="text/javascript">
  //create namespace client/index
  var pIndex = {}; //<<-----------find and replace for you

  //======================= init all config ==============================
  pIndex.restUrl = {
    read:'<%=url_for :controller => 'products', :action => 'index'%>/index',
    create:'<%=url_for :controller => 'products', :action => 'post_data' %>',
    update:'<%=url_for :controller => 'products', :action => 'post_data' %>',  // params[:id] != ''
    destroy:'<%=url_for :controller => 'products', :action => 'post_data' %>',  //--send params[:oper] = 'del'
    viewDetail: ''
  };

  pIndex.rightClick = function(grid, row, e){
    var storeItem = grid.getStore();
    var itemGridRecords = storeItem.getRange(0,storeItem.getCount()-1);
    e.preventDefault();
    this.cellMenu = new Ext.menu.Menu({
      items : [{
          text: 'Edit',
          iconCls: 'silk-application-edit',
          handler: pIndex.onEdit
        }, {
          text: 'Delete',
          iconCls: 'silk-delete',
          handler: pIndex.onDelete
        }]
    });
    this.cellMenu.showAt(e.getXY());
  }

  pIndex.readerField =[
    {name:'id',mapping:'id'},
    {name:'trader_sku_id',mapping:'trader_sku_id'},
    {name:'trader_sku',mapping:'trader_sku'},
    {name:'name',mapping:'name'},
    {name:'detail',mapping:'detail'},
    {name:'product_type',mapping:'product_type'},
    {name:'spec',mapping:'spec'}
  ];

  //============column model for grid ======================================
  pIndex.cm = new Ext.grid.ColumnModel({
    defaults:{
      sortable:true
    },
    columns:[
      new Ext.grid.RowNumberer(),
      {
        header: 'Trader Sku',
        width: 200,
        maxLength: 13,
        dataIndex: 'trader_sku_id',
        renderer:function(val, meta, record) {
          //alert(val);
          return record.data.trader_sku;
        }
      },
      {
        header: 'Product Name',
        width: 250,
        dataIndex: 'name'
      },
      {
        header: 'Product Detail',
        width: 500,
        dataIndex: 'detail'
      },
      {
        header: 'Product Type',
        width: 150,
        dataIndex: 'product_type'
      },
      {
        header: 'Product Spec',
        width: 150,
        dataIndex: 'spec'
      }
    ]
  });

  pIndex.filterField = [{ //---------map same Json Reader name
      type: 'string',
      dataIndex: 'trader_sku_id'
    }, {
      type: 'string',
      dataIndex: 'name'
    }, {
      type: 'string',
      dataIndex: 'detail'
    }, {
      type: 'string',
      dataIndex: 'product_type'
    }, {
      type: 'string',
      dataIndex: 'spec'
    }];

  pIndex.formItem = [ //--------item in form ex.combobox,textfield
    {
      xtype:'hidden',
      name:'id'
    }, {
      xtype:'textfield',
      fieldLabel: 'Trader Sku',
      name: 'trader_sku'
    }, {
      fieldLabel: 'Product Name',
      name:'name',
      xtype: 'textfield'
    }, {
      fieldLabel: 'Product Detail',
      name:'detail',
      xtype: 'textfield'
    }, {
      fieldLabel: 'Product Type',
      name:'product_type',
      xtype: 'textfield'
    }, {
      fieldLabel: 'Product Spec',
      name:'spec',
      xtype: 'textfield'
    }
  ];

  //===============title text for grid
  pIndex.text = {
    grid: 'Listing Product',
    addWin: 'Add Product',
    editWin: 'Edit Product',
    displayFooter : 'Displaying Products {0} - {1} of {2}',
    emptyDisplayFooter: 'No Products to display'
  };
  pIndex.errorConfig = {
    title:'Error',
    msg: 'Please Select Row.',
    buttons: Ext.Msg.OK,
    animEl: 'logo',
    icon: Ext.MessageBox.ERROR
  }

  Ext.onReady(function(){
    var limit = 10;
    var gridMask = new Ext.LoadMask('product_grid', {msg:"Loading..."});
    //============== Action Handler ======================

    pIndex.onAdd = function(){ //event on click add on grid menu
      pIndex.addForm.getForm().reset();
      // pIndex.addForm.getForm().setValues({status:1});
      pIndex.addForm.getForm().clearInvalid();
      pIndex.addWin.show();
    }
    pIndex.onEdit = function(){ //event on click add on grid menu
      var r = pIndex.grid.getSelectionModel().getSelected();
      if(r!=undefined){
        pIndex.editForm.getForm().reset();
        //    pIndex.editForm.getForm().setValues({status:1});
        pIndex.editForm.getForm().clearInvalid();
        var rec = pIndex.store.getById(''+r.data.id);
        pIndex.editForm.getForm().loadRecord(rec);
        pIndex.editWin.show();
      }else{
        Ext.Msg.show(pIndex.errorConfig);
      }
    }
    pIndex.onDelete = function(){
      var r = pIndex.grid.getSelectionModel().getSelected();
      if(r!=undefined){
        var rec = pIndex.store.getById(''+r.data.id);
        Ext.MessageBox.confirm('Delete', 'Are you sure?', function(btn){
          if(btn == 'yes'){
            gridMask.show();
            var conn = new Ext.data.Connection();
            conn.request({
              url: pIndex.restUrl.destroy,
              //method: 'POST',
              params: {
                oper:'del',
                id:r.data.id
              },
              success: function(response, options){
                var resText = Ext.util.JSON.decode(response.responseText);
                gridMask.hide();
                if(resText.success){
                  pIndex.store.reload();
                }else{
                  Ext.MessageBox.show({
                    title:'Error',
                    msg: resText.errors.base,
                    buttons: Ext.Msg.OK,
                    icon: Ext.MessageBox.ERROR
                  });
                }
              }
              //  failure: function(response, options){ alert('Delete operation failed.'); }
            });

          }
        });
      }else{
        Ext.Msg.show(pIndex.errorConfig);
      }
    }
    //================== End Handler ===================
    Ext.QuickTips.init();
    pIndex.writer = new Ext.data.JsonWriter({
      encode: true,
      writeAllFields: false
    });
    pIndex.reader = new Ext.data.JsonReader({
      totalProperty: 'total',
      successProperty: 'success',
      idProperty: 'id',
      root: 'data',
      messageProperty: 'message',
      fields: pIndex.readerField
    });
    //================== store =====================
    pIndex.store = new Ext.data.GroupingStore({
      url: pIndex.restUrl.read,
      reader: pIndex.reader,
      writer: pIndex.writer,
      autoSave: false,
      remoteSort: true,
      remoteGroup:true,
      baseParams:{
        start: 0,
        limit: limit,
        q:1
      },
      autoLoad:true
    });

    //==================  filter =====================
    pIndex.filters = new Ext.ux.grid.GridFilters({
      encode: false, // json encode the filter query
      updateBuffer: 1,
      filters: pIndex.filterField
    });

    pIndex.addForm = new Ext.form.FormPanel({
      id: 'pIndexAddForm',
      iconCls: 'silk-user',
      frame: true,
      labelAlign: 'right',
      frame: true,
      width: 400,
      defaults:{
        width:200
      },
      items: pIndex.formItem,
      buttons:[
        {
          id: 'pIndexBtnAddFormSave',
          text:'Save',
          handler:function(){ //handler button click
            pIndex.addForm.getForm().submit({
              url: pIndex.restUrl.create,
              params:{
                is_add: '1'
              },
              waitMsg:'Saving...',
              success: function(form, action) {
                pIndex.addWin.hide();
                pIndex.store.load({
                  params:{
                    sort:'products.id',
                    dir:'DESC'
                  }
                });
              }
            });
          }
        }, {
          id: 'pIndexBtnAddFormCancel',
          text:'Cancel',
          handler:function(){
            pIndex.addWin.hide();
          }
        }
      ]
    });

    pIndex.editForm = new Ext.form.FormPanel({
      id: 'pIndexEditForm',
      iconCls: 'silk-user',
      frame: true,
      labelAlign: 'right',
      frame: true,
      width: 400,
      defaultType: 'textfield',
      defaults:{
        width:200
      },
      items: pIndex.formItem,
      buttons:[
        {
          id: 'pIndexBtnEditFormSave',
          text:'Save',
          handler:function(){
            pIndex.editForm.getForm().submit({
              url: pIndex.restUrl.update,
              waitMsg:'Saving...',
              success: function(form, action) {
                pIndex.editWin.hide();
                pIndex.store.reload();
              }
            });
          }
        }, {
          id: 'pIndexBtnEditFormCancel',
          text:'Cancel',
          handler:function(){
            pIndex.editWin.hide();
          }
        }
      ]
    });

    pIndex.addWin = new Ext.Window({
      id: 'pIndexAddWin',
      title: pIndex.text.addWin,
      closeAction:'hide',
      closable:true,
      modal:true,
      resizable:false,
      plain:true,
      items:[
        pIndex.addForm
      ]
    });

    pIndex.editWin = new Ext.Window({
      id: 'pIndexEditWin',
      title: pIndex.text.editWin,
      closeAction:'hide',
      closable:true,
      modal:true,
      resizable:false,
      plain:true,
      items:[
        pIndex.editForm
      ]
    });

    pIndex.grid = new Ext.grid.GridPanel({
      id: 'pIndexGrid',
      renderTo: 'product_grid',
      title: pIndex.text.grid,
      iconCls: 'silk-application-view_columns',
      height: 350,
      store: pIndex.store,
      loadMask: true,
      stripeRows: true,
      enableRowBody: true,
      plugins: [pIndex.filters],
      view: new Ext.grid.GroupingView({
        forceFit:true,
        groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Items" : "Item"]})'
      }),
      colModel:pIndex.cm,
      tbar: [{
          id: 'pIndexBtnGridAdd',
          text: 'Add',
          iconCls: 'silk-add',
          handler: pIndex.onAdd
        }, '-', {
          id: 'pIndexBtnGridEdit',
          text: 'Edit',
          iconCls: 'silk-application-edit',
          handler: pIndex.onEdit
        }, '-', {
          id: 'pIndexBtnGridDelete',
          text: 'Delete',
          iconCls: 'silk-delete',
          handler: pIndex.onDelete
        },'->',
        {
          id: 'pIndexBtnGridClearFilter',
          text: 'Clear Filter Data',
          iconCls: 'silk-textfield_delete',
          handler: function () {
            pIndex.grid.filters.clearFilters();
          }
        },'-',
        {
          id: 'pIndexBtnGridClearGrouping',
          text: 'Clear Grouping',
          iconCls: 'silk-textfield_delete',
          handler: function () {
            pIndex.store.clearGrouping();
          }
        }
      ],
      listeners : {
        'rowcontextmenu' : function(grid, rowIndex, e){
          var sm = grid.getSelectionModel();
          sm.selectRow(rowIndex, sm.isSelected(rowIndex));
          pIndex.rightClick(grid, rowIndex, e);
        }
      },
      bbar:
        new Ext.PagingToolbar({
        pageSize: limit,
        store: pIndex.store,
        displayInfo: true,
        displayMsg: pIndex.text.displayFooter ,
        emptyMsg: pIndex.text.emptyDisplayFooter,
        plugins: [pIndex.filters]
      })
    });
  });
</script>
<div id="product_grid"></div><br/>
<%= render :file => 'supplier_skus/index' %>