<style type="text/css">
  .desCombo{
    color:#888888;
  }
</style>
<script type="text/javascript">
  //create namespace client_order_fulfillment/index
  var cOrderFF = {}; //<<-----------find and replace for you
  //======================= init all config ==============================
  cOrderFF.restUrl = {
    read:'<%=client_order_fulfillment_grid_view_path(params[:id]) %>',
    create:'<%=client_order_fulfillment_grid_path(params[:id]) %>',
    update:'<%=client_order_fulfillment_grid_path(params[:id]) %>',  // params[:id] != ''
    destroy:'<%=client_order_fulfillment_grid_path(params[:id]) %>',  //--send params[:oper] = 'del'
    viewDetail: ''
  };

  cOrderFF.rightClick = function(grid, row, e){
    var storeItem = grid.getStore();
    var itemGridRecords = storeItem.getRange(0,storeItem.getCount()-1);
    e.preventDefault();
    this.cellMenu = new Ext.menu.Menu({
      items : [{
          text: 'Edit',
          iconCls: 'silk-application-edit',
          handler: cOrderFF.onEdit
        }, {
          text: 'Delete',
          iconCls: 'silk-delete',
          handler: cOrderFF.onDelete
        }]
    });
    this.cellMenu.showAt(e.getXY());
  }

  cOrderFF.readerField =[
    {name:'id',mapping:'id'},
    {name:'supplier_sku_id',mapping:'supplier_sku_id'},
    {name:'supplier_sku_name',mapping:'supplier_sku_name'},
    {name:'quantity',mapping:'quantity'},
    {name:'order_status_id',mapping:'order_status_id'},
    {name:'order_status_name',mapping:'order_status_name'},
    {name:'total_drain_weight',mapping:'total_drain_weight'},
    {name:'total_gross_weight',mapping:'total_gross_weight'},
    {name:'total_net_weight',mapping:'total_net_weight'},
    {name:'container_usage',mapping:'container_usage'},
    {name:'unit_id',mapping:'unit_id'},
    {name:'unit_name',mapping:'unit_name'}
  ];

  //============column model for grid ======================================
  cOrderFF.cm = new Ext.grid.ColumnModel({
    defaults:{
      sortable:true
    },
    columns:[
      new Ext.grid.RowNumberer(),
      {
        header: 'Product',
        width: 250,
        maxLength: 13,
        dataIndex: 'supplier_sku_id',
        renderer:function(val, meta, record) {
          return record.data.supplier_sku_name;
        }
      },
      {
        header: 'Quantity',
        width: 170,
        dataIndex: 'quantity'
      },
      {
        header: 'Order Status',
        width: 200,
        dataIndex: 'order_status_id',
        renderer:function(val, meta, record) {
          return record.data.order_status_name;
        }
      },
      {
        header: 'Total Drain Weight',
        width: 200,
        dataIndex: 'total_drain_weight'
      },
      {
        header: 'Total Gross Weight',
        width: 200,
        dataIndex: 'total_gross_weight'
      },
      {
        header: 'Total Net Weight',
        width: 200,
        dataIndex: 'total_net_weight'
      },
      {
        header: 'Container Usage',
        width: 150,
        dataIndex: 'container_usage'
      },
      {
        header: 'Unit',
        width: 200,
        dataIndex: 'unit_id',
        renderer:function(val, meta, record) {
          return record.data.unit_name;
        }
      }
    ]
  });

  cOrderFF.filterField = [{ //---------map same Json Reader name
      type: 'string',
      dataIndex: 'supplier_sku_id'
    }, {
      type: 'numeric',
      dataIndex: 'quantity'
    }, {
      type: 'string',
      dataIndex: 'order_status_id'
    }, {
      type: 'numeric',
      dataIndex: 'total_drain_weight'
    }, {
      type: 'numeric',
      dataIndex: 'total_gross_weight'
    }, {
      type: 'numeric',
      dataIndex: 'total_net_weight'
    }, {
      type: 'numeric',
      dataIndex: 'container_usage'
    }, {
      type: 'string',
      dataIndex: 'unit_id'
    }];

  cOrderFF.formItem = [ //--------item in form ex.combobox,textfield
    {
      xtype:'hidden',
      name:'id'
    }, {
      xtype: 'combo',
      name:'supplier_sku_id',
      fieldLabel: 'Product',
      allowBlank: false,
      typeAhead: true,
      triggerAction: 'all',
      lazyRender:true,
      forceSelection:true,
      selectOnFocus:true,
      store: new Ext.data.Store({ //<----this store for Combobox
        url:'<%= url_for(:controller => 'client_order_fulfillments', :action => 'get_all_supplier_sku') %>',
        mode: 'remote',
        autoLoad: true,
        baseParams: {
          trader_sku_id: '<%= @client_order.trader_sku.id %>'
        },
        reader:new Ext.data.JsonReader({
          totalProperty: 'total',
          root: 'data',
          fields:[
            {name:'id',mapping:'id'},
            {name:'supplier_sku',mapping:'supplier_sku'},
            {name:'product_name',mapping:'product_name'}
          ]
        })
      }),
      hiddenName:'supplier_sku_id',
      valueField: 'id',
      displayField: 'product_name',
      tpl:'<tpl for="."><div class="x-combo-list-item">{product_name}'+
        '<div class="desCombo"><b>Supplier SKU : </b>{supplier_sku}</div>'+
        '</div></tpl>'
    }, {
      xtype:'textfield',
      fieldLabel: 'Quantity',
      name: 'quantity'
    }, {
      xtype: 'combo',
      name:'order_status_id',
      fieldLabel: 'Order Status',
      typeAhead: true,
      triggerAction: 'all',
      lazyRender:true,
      forceSelection:true,
      selectOnFocus:true,
      store: new Ext.data.Store({ //<----this store for Combobox
        url:'<%= url_for(:controller => 'client_order_fulfillments', :action => 'get_all_order_status') %>',
        mode: 'remote',
        autoLoad: true,
        reader:new Ext.data.JsonReader({
          totalProperty: 'total',
          root: 'data',
          fields:[
            {name:'id',mapping:'id'},
            {name:'name',mapping:'name'}
          ]
        })
      }),
      hiddenName:'order_status_id',
      valueField: 'id',
      displayField: 'name'
    }, {
      xtype:'textfield',
      fieldLabel: 'Total Drain Weight',
      name: 'total_drain_weight'
    }, {
      xtype:'textfield',
      fieldLabel: 'Total Gross Weight',
      name: 'total_gross_weight'
    }, {
      xtype:'textfield',
      fieldLabel: 'Total Net Weight',
      name: 'total_net_weight'
    }, {
      xtype:'textfield',
      fieldLabel: 'Container Usage',
      name: 'container_usage'
    },{
      xtype: 'combo',
      name:'unit_id',
      fieldLabel: 'Unit',
      typeAhead: true,
      triggerAction: 'all',
      lazyRender:true,
      forceSelection:true,
      selectOnFocus:true,
      store: new Ext.data.Store({ //<----this store for Combobox
        url:'<%= url_for(:controller => 'client_order_fulfillments', :action => 'get_all_unit') %>',
        mode: 'remote',
        autoLoad: true,
        reader:new Ext.data.JsonReader({
          totalProperty: 'total',
          root: 'data',
          fields:[
            {name:'id',mapping:'id'},
            {name:'name',mapping:'name'}
          ]
        })
      }),
      hiddenName:'unit_id',
      valueField: 'id',
      displayField: 'name'
    }
  ];

  //===============title text for grid
  cOrderFF.text = {
    grid: 'Listing Client Order Fulfillment',
    addWin: 'Add Client Order Fulfillment',
    editWin: 'Edit Client Order Fulfillment',
    displayFooter : 'Displaying Client Order Fulfillment {0} - {1} of {2}',
    emptyDisplayFooter: 'No Client Order Fulfillment to display'
  };
  cOrderFF.errorConfig = {
    title:'Error',
    msg: 'Please Select Row.',
    buttons: Ext.Msg.OK,
    animEl: 'logo',
    icon: Ext.MessageBox.ERROR
  }

  Ext.onReady(function(){
    var limit = 10;
    var gridMask = new Ext.LoadMask('client_order_fulfillment_grid', {msg:"Loading..."});
    //============== Action Handler ======================

    cOrderFF.onAdd = function(){ //event on click add on grid menu
      cOrderFF.addForm.getForm().reset();
      //  cOrderFF.addForm.getForm().setValues({request_et_type:'ETD'});
      cOrderFF.addForm.getForm().clearInvalid();
      cOrderFF.addWin.show();
    }
    cOrderFF.onEdit = function(){ //event on click add on grid menu
      var r = cOrderFF.grid.getSelectionModel().getSelected();
      if(r!=undefined){
        cOrderFF.editForm.getForm().reset();
        //   cOrderFF.addForm.getForm().setValues({request_et_type:'ETD'});
        cOrderFF.editForm.getForm().clearInvalid();
        var rec = cOrderFF.store.getById(''+r.data.id);
        cOrderFF.editForm.getForm().loadRecord(rec);
        cOrderFF.editWin.show();
      }else{
        Ext.Msg.show(cOrderFF.errorConfig);
      }
    }
    cOrderFF.onDelete = function(){
      var r = cOrderFF.grid.getSelectionModel().getSelected();
      if(r!=undefined){
        var rec = cOrderFF.store.getById(''+r.data.id);
        Ext.MessageBox.confirm('Delete', 'Are you sure?', function(btn){
          if(btn == 'yes'){
            gridMask.show();
            var conn = new Ext.data.Connection();
            conn.request({
              url: cOrderFF.restUrl.destroy,
              //method: 'POST',
              params: {
                oper:'del',
                id:r.data.id
              },
              success: function(response, options){
                var resText = Ext.util.JSON.decode(response.responseText);
                gridMask.hide();
                if(resText.success){
                  cOrderFF.store.reload();
                }else{
                  Ext.MessageBox.show({
                    title:'Error',
                    msg: resText.errors.base,
                    buttons: Ext.Msg.OK,
                    icon: Ext.MessageBox.ERROR
                  });
                }
              }
              //  failure: function(response, options){ alert('Delete operation failed.'); }
            });

          }
        });
      }else{
        Ext.Msg.show(cOrderFF.errorConfig);
      }
    }
    //================== End Handler ===================
    Ext.QuickTips.init();
    cOrderFF.writer = new Ext.data.JsonWriter({
      encode: true,
      writeAllFields: false
    });
    cOrderFF.reader = new Ext.data.JsonReader({
      totalProperty: 'total',
      successProperty: 'success',
      idProperty: 'id',
      root: 'data',
      messageProperty: 'message',
      fields: cOrderFF.readerField
    });
    //================== store =====================
    cOrderFF.store = new Ext.data.GroupingStore({
      url: cOrderFF.restUrl.read,
      reader: cOrderFF.reader,
      writer: cOrderFF.writer,
      autoSave: false,
      remoteSort: true,
      remoteGroup:true,
      baseParams:{
        start: 0,
        limit: limit,
        client_po_id:<%= params[:id] %>
      },
      autoLoad:true
    });

    //==================  filter =====================
    cOrderFF.filters = new Ext.ux.grid.GridFilters({
      encode: false, // json encode the filter query
      updateBuffer: 1,
      filters: cOrderFF.filterField
    });

    cOrderFF.addForm = new Ext.form.FormPanel({
      id: 'cOrderFFAddForm',
      iconCls: 'silk-user',
      frame: true,
      labelWidth: 120,
      labelAlign: 'right',
      frame: true,
      width: 400,
      defaults:{
        width:200
      },
      items: cOrderFF.formItem,
      buttons:[
        {
          id: 'cOrderFFBtnAddFormSave',
          text:'Save',
          handler:function(){ //handler button click
            if(cOrderFF.addForm.getForm().isValid()){
              cOrderFF.addForm.getForm().submit({
                url: cOrderFF.restUrl.create,
                params:{
                  is_add: '1',
                  client_contract_id:<%= params[:id] %>
                },
                waitMsg:'Saving...',
                success: function(form, action) {
                  cOrderFF.addWin.hide();
                  cOrderFF.store.load({
                    params:{
                      sort:'client_order_fulfillments.id',
                      dir:'DESC'
                    }
                  });
                },
                failure: function(form, action) {
                  var resText = Ext.util.JSON.decode(action.response.responseText);
                  //   console.log(resText);
                  gridMask.hide();
                  console.log(resText.success);
                  if(resText.success){
                    cIndex.store.reload();
                  }else{
                    if(resText.errors.base!=null){
                      Ext.MessageBox.show({
                        title:'Error',
                        msg: resText.errors.base,
                        buttons: Ext.Msg.OK,
                        icon: Ext.MessageBox.ERROR
                      });
                    }
                  }
                }
              });
            }
          }
        }, {
          id: 'cOrderFFBtnAddFormCancel',
          text:'Cancel',
          handler:function(){
            cOrderFF.addWin.hide();
          }
        }
      ]
    });

    cOrderFF.editForm = new Ext.form.FormPanel({
      id: 'cOrderFFEditForm',
      iconCls: 'silk-user',
      frame: true,
      labelAlign: 'right',
      frame: true,
      width: 400,
      defaultType: 'textfield',
      defaults:{
        width:200
      },
      items: cOrderFF.formItem,
      buttons:[
        {
          id: 'cOrderFFBtnEditFormSave',
          text:'Save',
          handler:function(){
            cOrderFF.editForm.getForm().submit({
              url: cOrderFF.restUrl.update,
              params:{
                client_contract_id:<%= params[:id] %>
              },
              waitMsg:'Saving...',
              success: function(form, action) {
                cOrderFF.editWin.hide();
                cOrderFF.store.reload();
              },
              failure: function(form, action) {
                var resText = Ext.util.JSON.decode(action.response.responseText);
                // console.log(resText);
                gridMask.hide();
                console.log(resText.success);
                if(resText.success){
                  cIndex.store.reload();
                }else{
                  if(resText.errors.base!=null){
                    Ext.MessageBox.show({
                      title:'Error',
                      msg: resText.errors.base,
                      buttons: Ext.Msg.OK,
                      icon: Ext.MessageBox.ERROR
                    });
                  }
                }
              }
            });
          }
        }, {
          id: 'cOrderFFBtnEditFormCancel',
          text:'Cancel',
          handler:function(){
            cOrderFF.editWin.hide();
          }
        }
      ]
    });

    cOrderFF.addWin = new Ext.Window({
      id: 'cOrderFFAddWin',
      title: cOrderFF.text.addWin,
      closeAction:'hide',
      closable:true,
      modal:true,
      resizable:false,
      plain:true,
      items:[
        cOrderFF.addForm
      ]
    });

    cOrderFF.editWin = new Ext.Window({
      id: 'cOrderFFEditWin',
      title: cOrderFF.text.editWin,
      closeAction:'hide',
      closable:true,
      modal:true,
      resizable:false,
      plain:true,
      items:[
        cOrderFF.editForm
      ]
    });

    cOrderFF.grid = new Ext.grid.GridPanel({
    id: 'cOrderFFGrid',
      renderTo: 'client_order_fulfillment_grid',
      title: cOrderFF.text.grid,
      iconCls: 'silk-application-view_columns',
      height: 350,
      store: cOrderFF.store,
      loadMask: true,
      stripeRows: true,
      enableRowBody: true,
      plugins: [cOrderFF.filters],
      view: new Ext.grid.GroupingView({
        forceFit:true,
        groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Items" : "Item"]})'
      }),
      colModel:cOrderFF.cm,
      tbar: [{
        id: 'cOrderFFBtnGridAdd',
          text: 'Add',
          iconCls: 'silk-add',
          handler: cOrderFF.onAdd
        }, '-', {
          id: 'cOrderFFBtnGridEdit',
          text: 'Edit',
          iconCls: 'silk-application-edit',
          handler: cOrderFF.onEdit
        }, '-', {
          id: 'cOrderFFBtnGridDelete',
          text: 'Delete',
          iconCls: 'silk-delete',
          handler: cOrderFF.onDelete
        },'->',
        {
          id: 'cOrderFFBtnGridClearFilter',
          text: 'Clear Filter Data',
          iconCls: 'silk-textfield_delete',
          handler: function () {
            cOrderFF.grid.filters.clearFilters();
          }
        },'-',
        {
          id: 'cOrderFFBtnGridClearGrouping',
          text: 'Clear Grouping',
          iconCls: 'silk-textfield_delete',
          handler: function () {
            cOrderFF.store.clearGrouping();
          }
        }
      ],
      listeners : {
        'rowcontextmenu' : function(grid, rowIndex, e){
          var sm = grid.getSelectionModel();
          sm.selectRow(rowIndex, sm.isSelected(rowIndex));
          cOrderFF.rightClick(grid, rowIndex, e);
        }
      },
      bbar:
        new Ext.PagingToolbar({
        pageSize: limit,
        store: cOrderFF.store,
        displayInfo: true,
        displayMsg: cOrderFF.text.displayFooter ,
        emptyMsg: cOrderFF.text.emptyDisplayFooter,
        plugins: [cOrderFF.filters]
      })
    });
  });
</script>
<div id="client_order_fulfillment_grid"></div>
