<style type="text/css">
  .desCombo{
    color:#888888;
  }
</style>
<script type="text/javascript">
  //create namespace supplier/index
  var sContract = {}; //<<-----------find and replace for you
  //======================= init all config ==============================
  sContract.restUrl = {
    read:'<%= supplier_contracts_path %>/index',
    create:'<%= url_for(:controller => 'supplier_contracts', :action => 'post_data') %>',
    update:'<%= url_for(:controller => 'supplier_contracts', :action => 'post_data') %>',  // params[:id] != ''
    destroy:'<%= url_for(:controller => 'supplier_contracts', :action => 'post_data') %>',  //--send params[:oper] = 'del'
    viewDetail: '<%= url_for(:controller => 'supplier_contracts', :action => 'index') %>'
  };

  sContract.rightClick = function(grid, row, e){
    var storeItem = grid.getStore();
    var itemGridRecords = storeItem.getRange(0,storeItem.getCount()-1);
    e.preventDefault();
    this.cellMenu = new Ext.menu.Menu({
      items : [{
          xtype : 'menuitem',
          text: 'View PO',
          iconCls: 'silk-application_form_magnify',
          handler:function(){
            var id = itemGridRecords[row].get('id');
            document.location = sContract.restUrl.viewDetail+'/'+id;
          }
        }, '-', {
          text: 'Edit',
          iconCls: 'silk-application-edit',
          handler: sContract.onEdit
        }, {
          text: 'Delete',
          iconCls: 'silk-delete',
          handler: sContract.onDelete
        }]
    });
    this.cellMenu.showAt(e.getXY());
  }

  sContract.readerField =[
    {name:'id',mapping:'id'},
    {name:'contract_code',mapping:'contract_code'},
    {name:'contract_date',mapping:'contract_date',type: 'date',dateFormat: 'c'},
    {name:'actual_contract',mapping:'actual_contract'},
    {name:'supplier_id',mapping:'supplier_id'},
    {name:'supplier_name',mapping:'supplier_name'},
    {name:'num_po',mapping:'num_po'},
    {name:'status',mapping:'status'},
    {name:'remark',mapping:'remark'}
  ];

  //============column model for grid ======================================
  sContract.cm = new Ext.grid.ColumnModel({
    defaults:{
      sortable:true
    },
    columns:[
      new Ext.grid.RowNumberer(),
      {
        header: 'Contract Code',
        width: 300,
        maxLength: 13,
        dataIndex: 'contract_code'
      },
      {
        header: 'Contract Date',
        width: 250,
        dataIndex: 'contract_date',
        renderer: Ext.util.Format.dateRenderer('d-m-Y')
      },
      {
        header: 'Supplier Name',
        width: 500,
        dataIndex: 'supplier_id',
        renderer:function(val, meta, record) {
          return record.data.supplier_name;
        }
      },
      {
        header: 'Actual Contract',
        width: 150,
        hidden: true,
        dataIndex: 'actual_contract'
      },
      {
        header: 'PO Count',
        width: 100,
        dataIndex: 'num_po',
        sortable: false,
        renderer:function(val, meta, record) {
          return val+'-PO';
        }
      },
      {
        header: 'Status',
        hidden: true,
        width: 100,
        dataIndex: 'status',
        renderer:function(val, meta, record) {
          return val;
        }
      }, {
        header: 'Remark',
        width: 300,
        dataIndex: 'remark',
        hidden: true
      }
    ]
  });

  sContract.filterField = [{ //---------map same Json Reader name
      type: 'string',
      dataIndex: 'contract_code'
    }, {
      type: 'date',
      dataIndex: 'contract_date',
      dateFormat: 'Y-m-d H:i:s'
    }, {
      type: 'string',
      dataIndex: 'supplier_id'
    }, {
      type: 'string',
      dataIndex: 'status'
    }, {
      type: 'string',
      dataIndex: 'remark'
    }];

  sContract.formItem = [ //--------item in form ex.combobox,textfield
    {
      xtype:'hidden',
      name:'id'
    }, {
      xtype: 'textfield',
      fieldLabel: 'Contract Code',
      name: 'contract_code',
      autoCreate : {
        tag : 'input',
        maxlength : 13
      }
    }, {
      xtype:'datefield',
      fieldLabel: 'Contract Date',
      name: 'contract_date',
      format:'d-m-Y'
    }, {
      fieldLabel: 'Supplier Name',
      name:'supplier_id',
      xtype: 'combo',
      typeAhead: false,
      //  allowBlank:false,
      triggerAction: 'all',
      minChars:1,
      forceSelection:true,
      selectOnFocus:true,
      store: new Ext.data.Store({ //<----this store for Combobox
        url:'<%= url_for(:controller => 'suppliers', :action => 'get_all_supplier') %>',
        mode: 'remote',
        autoLoad: true,
        reader:new Ext.data.JsonReader({
          totalProperty: 'total',          
          root: 'data',
          fields:[
            {name:'id',mapping:'id'},
            {name:'name',mapping:'name'},
            {name:'address',mapping:'address'}
          ]
        })
      }),
      hiddenName:'supplier_id',
      valueField: 'id',
      displayField: 'name',
      valueField: 'id',
      displayField: 'name',
      tpl:'<tpl for="."><div class="x-combo-list-item">{name}'+
        '<div class="desCombo"><b>address : </b>{address}</div>'+
        '</div></tpl>',
      listeners:{
        'expand': function(c){
          this.store.load();
        }
      }
    }
  ];

  //===============title text for grid
  sContract.text = {
    grid: 'Listing Supplier Contract',
    addWin: 'Add Supplier Contract',
    editWin: 'Edit Supplier Contract',
    displayFooter : 'Displaying Supplier Contracts {0} - {1} of {2}',
    emptyDisplayFooter: 'No Supplier Contracts to display'
  };
  sContract.errorConfig = {
    title:'Error',
    msg: 'Please Select Row.',
    buttons: Ext.Msg.OK,
    animEl: 'logo',
    icon: Ext.MessageBox.ERROR
  }

  Ext.onReady(function(){
    var limit = 10;
    var gridMask = new Ext.LoadMask('supplier_contract_grid', {msg:"Loading..."});
    //============== Action Handler ======================

    sContract.onAdd = function(){ //event on click add on grid menu
      sContract.addForm.getForm().reset();
      sContract.addForm.getForm().setValues({status:1});
      sContract.addForm.getForm().clearInvalid();
      sContract.addWin.show();
    }
    sContract.onEdit = function(){ //event on click add on grid menu
      var r = sContract.grid.getSelectionModel().getSelected();
      if(r!=undefined){
        sContract.editForm.getForm().reset();
        sContract.editForm.getForm().setValues({status:1});
        sContract.editForm.getForm().clearInvalid();
        var rec = sContract.store.getById(''+r.data.id);
        sContract.editForm.getForm().loadRecord(rec);
        sContract.editWin.show();
      }else{
        Ext.Msg.show(sContract.errorConfig);
      }
    }
    sContract.onDelete = function(){
      var r = sContract.grid.getSelectionModel().getSelected();
      if(r!=undefined){
        var rec = sContract.store.getById(''+r.data.id);
        Ext.MessageBox.confirm('Delete', 'Are you sure?', function(btn){
          if(btn == 'yes'){
            gridMask.show();
            var conn = new Ext.data.Connection();
            conn.request({
              url: sContract.restUrl.destroy,
              //method: 'POST',
              params: {
                oper:'del',
                id:r.data.id
              },
              success: function(response, options){
                var resText = Ext.util.JSON.decode(response.responseText);
                gridMask.hide();
                if(resText.success){
                  sContract.store.reload();
                }else{
                  Ext.MessageBox.show({
                    title:'Error',
                    msg: resText.errors.base,
                    buttons: Ext.Msg.OK,
                    icon: Ext.MessageBox.ERROR
                  });
                }
              }
              //  failure: function(response, options){ alert('Delete operation failed.'); }
            });

          }
        });
      }else{
        Ext.Msg.show(sContract.errorConfig);
      }
    }
    //================== End Handler ===================
    Ext.QuickTips.init();
    sContract.writer = new Ext.data.JsonWriter({
      encode: true,
      writeAllFields: false
    });
    sContract.reader = new Ext.data.JsonReader({
      totalProperty: 'total',
      successProperty: 'success',
      idProperty: 'id',
      root: 'data',
      messageProperty: 'message',
      fields: sContract.readerField
    });
    //================== store =====================
    sContract.store = new Ext.data.GroupingStore({
      url: sContract.restUrl.read,
      reader: sContract.reader,
      writer: sContract.writer,
      autoSave: false,
      remoteSort: true,
      remoteGroup:true,
      baseParams:{
        start: 0,
        limit: limit
      },
      autoLoad:true
    });

    //==================  filter =====================
    sContract.filters = new Ext.ux.grid.GridFilters({
      encode: false, // json encode the filter query
      updateBuffer: 1,
      filters: sContract.filterField
    });

    sContract.addForm = new Ext.form.FormPanel({
      id: 'sContractAddForm',
      iconCls: 'silk-user',
      frame: true,
      labelAlign: 'right',
      frame: true,
      width: 400,
      defaults:{
        width:200
      },
      items: sContract.formItem,
      buttons:[
        {
          id: 'sContractBtnAddFormSave',
          text:'Save',
          handler:function(){ //handler button click
            sContract.addForm.getForm().submit({
              url: sContract.restUrl.create,
              params:{
                is_add: '1'
              },
              waitMsg:'Saving...',
              success: function(form, action) {
                sContract.addWin.hide();
                sContract.store.load({
                  params:{
                    sort:'supplier_contracts.id',
                    dir:'DESC'
                  }
                });
              }
            });
          }
        }, {
          id: 'sContractBtnAddFormCancel',
          text:'Cancel',
          handler:function(){
            sContract.addWin.hide();
          }
        }
      ]
    });

    sContract.editForm = new Ext.form.FormPanel({
      id: 'sContractEditForm',
      iconCls: 'silk-user',
      frame: true,
      labelAlign: 'right',
      frame: true,
      width: 400,
      defaultType: 'textfield',
      defaults:{
        width:200
      },
      items: sContract.formItem,
      buttons:[
        {
          id: 'sContractBtnEditFormSave',
          text:'Save',
          handler:function(){
            sContract.editForm.getForm().submit({
              url: sContract.restUrl.update,
              waitMsg:'Saving...',
              success: function(form, action) {
                sContract.editWin.hide();
                sContract.store.reload();
              }
            });
          }
        }, {
          id: 'sContractBtnEditFormCancel',
          text:'Cancel',
          handler:function(){
            sContract.editWin.hide();
          }
        }
      ]
    });

    sContract.addWin = new Ext.Window({
      id: 'sContractAddWin',
      title: sContract.text.addWin,
      closeAction:'hide',
      closable:true,
      modal:true,
      resizable:false,
      plain:true,
      items:[
        sContract.addForm
      ]
    });

    sContract.editWin = new Ext.Window({
      id: 'sContractEditWin',
      title: sContract.text.editWin,
      closeAction:'hide',
      closable:true,
      modal:true,
      resizable:false,
      plain:true,
      items:[
        sContract.editForm
      ]
    });

    sContract.grid = new Ext.grid.GridPanel({
      id: 'sContractGrid',
      renderTo: 'supplier_contract_grid',
      title: sContract.text.grid,
      iconCls: 'silk-application-view_columns',
      height: 350,
      store: sContract.store,
      loadMask: true,
      stripeRows: true,
      enableRowBody: true,
      plugins: [sContract.filters],
      view: new Ext.grid.GroupingView({
        forceFit:true,
        groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Items" : "Item"]})'
      }),
      colModel:sContract.cm,
      tbar: [{
          id: 'sContractBtnGridAdd',
          text: 'Add',
          iconCls: 'silk-add',
          handler: sContract.onAdd
        }, '-', {
          id: 'sContractBtnGridEdit',
          text: 'Edit',
          iconCls: 'silk-application-edit',
          handler: sContract.onEdit
        }, '-', {
          id: 'sContractBtnGridDelete',
          text: 'Delete',
          iconCls: 'silk-delete',
          handler: sContract.onDelete
        },'->',
        {
          id: 'sContractBtnGridClearFilter',
          text: 'Clear Filter Data',
          iconCls: 'silk-textfield_delete',
          handler: function () {
            sContract.grid.filters.clearFilters();
          }
        },'-',
        {
          id: 'sContractBtnGridClearGrouping',
          text: 'Clear Grouping',
          iconCls: 'silk-textfield_delete',
          handler: function () {
            sContract.store.clearGrouping();
          }
        }
      ],
      listeners : {
        'rowcontextmenu' : function(grid, rowIndex, e){
          var sm = grid.getSelectionModel();
          sm.selectRow(rowIndex, sm.isSelected(rowIndex));
          sContract.rightClick(grid, rowIndex, e);
        }
      },
      bbar:
        new Ext.PagingToolbar({
        pageSize: limit,
        store: sContract.store,
        displayInfo: true,
        displayMsg: sContract.text.displayFooter ,
        emptyMsg: sContract.text.emptyDisplayFooter,
        plugins: [sContract.filters]
      })
    });
  });
</script>
<div id="supplier_contract_grid"></div>
