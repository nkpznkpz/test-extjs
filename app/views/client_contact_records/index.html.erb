<style type="text/css">
  .desCombo{
    color:#888888;
  }
</style>
<script type="text/javascript">
  //create namespace client_po/index
  var ccr = {}; //<<-----------find and replace for you
  //======================= init all config ==============================
  ccr.restUrl = {
    read:'<%= url_for(:controller => 'client_contact_records', :action => 'index') %>',
    create:'<%= url_for(:controller => 'client_contact_records', :action => 'post_data') %>',
    update:'<%= url_for(:controller => 'client_contact_records', :action => 'post_data') %>',  // params[:id] != ''
    destroy:'<%= url_for(:controller => 'client_contact_records', :action => 'post_data') %>',  //--send params[:oper] = 'del'
    viewDetail: ''
  };

  ccr.rightClick = function(grid, row, e){
    var storeItem = grid.getStore();
    var itemGridRecords = storeItem.getRange(0,storeItem.getCount()-1);
    e.preventDefault();
    this.cellMenu = new Ext.menu.Menu({
      items : [{
          text: 'Edit',
          iconCls: 'silk-application-edit',
          handler: ccr.onEdit
        }, {
          text: 'Delete',
          iconCls: 'silk-delete',
          handler: ccr.onDelete
        }]
    });
    this.cellMenu.showAt(e.getXY());
  }

  ccr.readerField =[
    {name:'id',mapping:'id'},
    {name:'product_id',mapping:'product_id'},
    {name:'product_name',mapping:'product_name'},
    {name:'total1',mapping:'total1'},
    {name:'remainder',mapping:'remainder'},
    {name:'request_date',mapping:'request_date',type: 'date',dateFormat: 'c'}
  ];
  // define a custom summary function
  Ext.ux.grid.GroupSummary.Calculations['totalRemainder'] = function(v, record, field){
    return v + record.data.total1;
  };
  //============column model for grid ======================================
  ccr.cm = new Ext.grid.ColumnModel({
    defaults:{
      sortable:true
    },
    columns:[
      new Ext.grid.RowNumberer(),
      {
        header: 'Product',
        width: 250,
        dataIndex: 'product_id',        
        summaryType: 'count',
        hideable: false,
        renderer:function(val, meta, record) {
          return record.data.product_name;
        },
        summaryRenderer: function(v, params, data){
          return ((v === 0 || v > 1) ? '(' + v +' Products)' : '(1 Products)');
        }
      },
      {
        header: 'Total',
        width: 200,
        dataIndex: 'total1',
        sortable: false,
        summaryType: 'totalRemainder',
        summaryRenderer: function(v, params, data){
          return 'Total : ' + v
        }
      },
      {
        header: 'Remainder',
        width: 200,
        dataIndex: 'remainder',
        sortable: false,
        summaryType: 'max',
        summaryRenderer: function(v, params, data){
          return 'Remainder : ' + v
        }
      },
      {
        header: 'Request Date',
        width: 200,
        dataIndex: 'request_date',
        sortable: false,
        renderer: Ext.util.Format.dateRenderer('d-m-Y')
      }
    ]
  });

  ccr.filterField = [{ //---------map same Json Reader name
      type: 'string',
      dataIndex: 'product_id'
    }, {
      type: 'numeric',
      dataIndex: 'total1'
    }, {
      type: 'date',
      dateFormat: 'Y-m-d H:i:s',
      dataIndex: 'request_date'
    }];

  ccr.formItem = [ //--------item in form ex.combobox,textfield
    {
      xtype:'hidden',
      name:'id'
    }, {
      xtype: 'combo',
      name:'product_id',
      fieldLabel: 'Product',
      typeAhead: false,
      triggerAction: 'all',
      lazyRender:true,
      forceSelection:true,
      selectOnFocus:true,
      store: new Ext.data.Store({ //<----this store for Combobox
        url:'<%= url_for(:controller => 'products', :action => 'get_all_product') %>',
        mode: 'remote',
        autoLoad: true,
        reader:new Ext.data.JsonReader({
          totalProperty: 'total',
          root: 'data',
          fields: [
            {name:'id',mapping:'id'},
            {name:'name',mapping:'name'}
          ]
        })
      }),
      hiddenName:'product_id',
      valueField: 'id',
      displayField: 'name'
    }, {
      xtype: 'textfield',
      fieldLabel: 'Total',
      name: 'total1'
    }, {
      xtype: 'datefield',
      fieldLabel: 'Request Date',
      name: 'request_date'
    }
  ];

  //===============title text for grid
  ccr.text = {
    grid: 'Listing Client Contact Record',
    addWin: 'Add Client Contact Record',
    editWin: 'Edit Client Contact Record',
    displayFooter : 'Displaying Client Contact Record {0} - {1} of {2}',
    emptyDisplayFooter: 'No Client Contact Record to display'
  };
  ccr.errorConfig = {
    title:'Error',
    msg: 'Please Select Row.',
    buttons: Ext.Msg.OK,
    animEl: 'logo',
    icon: Ext.MessageBox.ERROR
  }

  Ext.onReady(function(){
    var limit = 1000;
    var gridMask = new Ext.LoadMask('client_contact_record_grid', {msg:"Loading..."});
    //============== Action Handler ======================

    ccr.onAdd = function(){ //event on click add on grid menu
      ccr.addForm.getForm().reset();
      ccr.addForm.getForm().clearInvalid();
      ccr.addWin.show();
    }
    ccr.onEdit = function(){ //event on click add on grid menu
      var r = ccr.grid.getSelectionModel().getSelected();
      if(r!=undefined){
        ccr.editForm.getForm().reset();
        ccr.editForm.getForm().clearInvalid();
        var rec = ccr.store.getById(''+r.data.id);
        ccr.editForm.getForm().loadRecord(rec);
        ccr.editWin.show();
      }else{
        Ext.Msg.show(ccr.errorConfig);
      }
    }
    ccr.onDelete = function(){
      var r = ccr.grid.getSelectionModel().getSelected();
      if(r!=undefined){
        var rec = ccr.store.getById(''+r.data.id);
        Ext.MessageBox.confirm('Delete', 'Are you sure?', function(btn){
          if(btn == 'yes'){
            gridMask.show();
            var conn = new Ext.data.Connection();
            conn.request({
              url: ccr.restUrl.destroy,
              //method: 'POST',
              params: {
                oper:'del',
                id:r.data.id
              },
              success: function(response, options){
                var resText = Ext.util.JSON.decode(response.responseText);
                gridMask.hide();
                if(resText.success){
                  ccr.store.reload();
                }else{
                  Ext.MessageBox.show({
                    title:'Error',
                    msg: resText.errors.base,
                    buttons: Ext.Msg.OK,
                    icon: Ext.MessageBox.ERROR
                  });
                }
              }
              //  failure: function(response, options){ alert('Delete operation failed.'); }
            });

          }
        });
      }else{
        Ext.Msg.show(ccr.errorConfig);
      }
    }
    //================== End Handler ===================
    Ext.QuickTips.init();
    ccr.writer = new Ext.data.JsonWriter({
      encode: true,
      writeAllFields: false
    });
    ccr.reader = new Ext.data.JsonReader({
      totalProperty: 'total',
      successProperty: 'success',
      idProperty: 'id',
      root: 'data',
      messageProperty: 'message',
      fields: ccr.readerField
    });
    //================== store =====================
    ccr.store = new Ext.data.GroupingStore({
      url: ccr.restUrl.read,
      reader: ccr.reader,
      writer: ccr.writer,
      autoSave: false,
      remoteSort: true,
      remoteGroup:true,
      groupField: 'product_id',
      baseParams:{
        start: 0,
        limit: limit,
        client_contract_id:<%= params[:id] %>
      },
      autoLoad:true
    });

    //==================  filter =====================
    ccr.filters = new Ext.ux.grid.GridFilters({
      encode: false, // json encode the filter query
      updateBuffer: 1,
      filters: ccr.filterField
    });

    ccr.addForm = new Ext.form.FormPanel({
      id: 'ccrAddForm',
      iconCls: 'silk-user',
      frame: true,
      labelWidth: 120,
      labelAlign: 'right',
      frame: true,
      width: 400,
      defaults:{
        width:200
      },
      items: ccr.formItem,
      buttons:[
        {
          id: 'ccrBtnAddFormSave',
          text:'Save',
          handler:function(){ //handler button click
            ccr.addForm.getForm().submit({
              url: ccr.restUrl.create,
              params:{
                is_add: '1',
                client_contract_id:<%= params[:id] %>
              },
              waitMsg:'Saving...',
              success: function(form, action) {
                ccr.addWin.hide();
                ccr.store.load({
                  params:{
                    sort:'product_id',
                    dir:'asc'
                  }
                });
              },
              failure: function(form, action) {
                var resText = Ext.util.JSON.decode(action.response.responseText);
                console.log(resText);
                gridMask.hide();
                if(resText.success){
                  cIndex.store.reload();
                }else{
                  Ext.MessageBox.show({
                    title:'Error',
                    msg: resText.errors.base,
                    buttons: Ext.Msg.OK,
                    icon: Ext.MessageBox.ERROR
                  });
                }
              }
            });
          }
        }, {
          id: 'ccrBtnCancelForm',
          text:'Cancel',
          handler:function(){
            ccr.addWin.hide();
          }
        }
      ]
    });

    ccr.editForm = new Ext.form.FormPanel({
      id: 'ccrEditFormCancel',
      iconCls: 'silk-user',
      frame: true,
      labelAlign: 'right',
      frame: true,
      width: 400,
      defaultType: 'textfield',
      defaults:{
        width:200
      },
      items: ccr.formItem,
      buttons:[
        {
          id: 'ccrBtnEditFormSave',
          text:'Save',
          handler:function(){
            ccr.editForm.getForm().submit({
              url: ccr.restUrl.update,
              params:{
                client_contract_id:<%= params[:id] %>
              },
              waitMsg:'Saving...',
              success: function(form, action) {
                ccr.editWin.hide();
                ccr.store.reload();
              },
              failure: function(form, action) {
                var resText = Ext.util.JSON.decode(action.response.responseText);
                console.log(resText);
                gridMask.hide();
                if(resText.success){
                  cIndex.store.reload();
                }else{
                  Ext.MessageBox.show({
                    title:'Error',
                    msg: resText.errors.base,
                    buttons: Ext.Msg.OK,
                    icon: Ext.MessageBox.ERROR
                  });
                }
              }
            });
          }
        }, {
          id: 'ccrBtnEditFormCancel',
          text:'Cancel',
          handler:function(){
            ccr.editWin.hide();
          }
        }
      ]
    });

    ccr.addWin = new Ext.Window({
      id: 'ccrAddWin',
      title: ccr.text.addWin,
      closeAction:'hide',
      closable:true,
      modal:true,
      resizable:false,
      plain:true,
      items:[
        ccr.addForm
      ]
    });

    ccr.editWin = new Ext.Window({
      id: 'ccrEditWin',
      title: ccr.text.editWin,
      closeAction:'hide',
      closable:true,
      modal:true,
      resizable:false,
      plain:true,
      items:[
        ccr.editForm
      ]
    });

    ccr.grid = new Ext.grid.GridPanel({
      id: 'ccrGrid',
      renderTo: 'client_contact_record_grid',
      title: ccr.text.grid,
      iconCls: 'silk-application-view_columns',
      height: 350,
      store: ccr.store,
      loadMask: true,
      stripeRows: true,
      enableRowBody: true,
      plugins: [ccr.filters,new Ext.ux.grid.GroupSummary()],
      view: new Ext.grid.GroupingView({
        forceFit: true,
        showGroupName: false,
        enableNoGroups: false,
        enableGroupingMenu: false
        // hideGroupedColumn: true
      }),
      colModel:ccr.cm,
      tbar: [{
          id: 'ccrBtnGridAdd',
          text: 'Add',
          iconCls: 'silk-add',
          handler: ccr.onAdd
        }, '-', {
          id: 'ccrBtnGridEdit',
          text: 'Edit',
          iconCls: 'silk-application-edit',
          handler: ccr.onEdit
        }, '-', {
          id: 'ccrBtnGridDelete',
          text: 'Delete',
          iconCls: 'silk-delete',
          handler: ccr.onDelete
        },'->',
        {
          id: 'ccrBtnGridClearFilter',
          text: 'Clear Filter Data',
          iconCls: 'silk-textfield_delete',
          handler: function () {
            ccr.grid.filters.clearFilters();
          }
        }
      ],
      listeners : {
        'rowcontextmenu' : function(grid, rowIndex, e){
          var sm = grid.getSelectionModel();
          sm.selectRow(rowIndex, sm.isSelected(rowIndex));
          ccr.rightClick(grid, rowIndex, e);
        }
      },
      bbar:
        new Ext.PagingToolbar({
        pageSize: limit,
        store: ccr.store,
        displayInfo: true,
        displayMsg: ccr.text.displayFooter ,
        emptyMsg: ccr.text.emptyDisplayFooter,
        plugins: [ccr.filters]
      })
    });

  });
</script>
<div id="client_contact_record_grid"></div>
